public class CloudinaryStorageServiceTests : IDisposable
{
   private readonly CloudinaryStorageService _service;
   private readonly IConfiguration _configuration;
   private readonly List<string> _uploadedPublicIds = new();

   public CloudinaryStorageServiceTests()
   {
       var configValues = new Dictionary<string, string>
       {
           {"CLOUDINARY_CLOUD_NAME", Environment.GetEnvironmentVariable("CLOUDINARY_CLOUD_NAME")},
           {"CLOUDINARY_API_KEY", Environment.GetEnvironmentVariable("CLOUDINARY_API_KEY")},
           {"CLOUDINARY_API_SECRET", Environment.GetEnvironmentVariable("CLOUDINARY_API_SECRET")}
       };

       _configuration = new ConfigurationBuilder()
           .AddInMemoryCollection(configValues)
           .Build();
       
       _service = new CloudinaryStorageService(_configuration);
   }

   private IFormFile CreateTestFile(string filename = "test.jpg", string contentType = "image/jpeg")
   {
       var content = "test image content";
       var stream = new MemoryStream();
       var writer = new StreamWriter(stream);
       writer.Write(content);
       writer.Flush();
       stream.Position = 0;

       var file = new FormFile(stream, 0, stream.Length, "test", filename)
       {
           Headers = new HeaderDictionary(),
           ContentType = contentType
       };
       return file;
   }

   [Fact]
   public async Task UploadAsync_WithValidFile_ShouldSucceed()
   {
       // Arrange
       var file = CreateTestFile();

       // Act
       var result = await _service.UploadAsync(file);

       // Assert
       Assert.True(result.IsSuccess);
       Assert.NotNull(result.Data);
       _uploadedPublicIds.Add(result.Data);
   }

   [Fact]
   public async Task UploadAsync_WithInvalidFile_ShouldFail()
   {
       // Arrange
       var file = CreateTestFile("test.txt", "text/plain");

       // Act
       var result = await _service.UploadAsync(file);

       // Assert
       Assert.False(result.IsSuccess);
       Assert.Equal(500, result.StatusCode);
   }

   [Fact]
   public async Task DeleteAsync_WithValidPublicId_ShouldSucceed()
   {
       // Arrange
       var file = CreateTestFile();
       var uploadResult = await _service.UploadAsync(file);
       Assert.True(uploadResult.IsSuccess);

       // Act
       var result = await _service.DeleteAsync(uploadResult.Data);

       // Assert
       Assert.True(result.IsSuccess);
       Assert.True(result.Data);
   }

   [Fact]
   public async Task DeleteAsync_WithInvalidPublicId_ShouldFail()
   {
       // Act
       var result = await _service.DeleteAsync("invalid_public_id");

       // Assert
       Assert.False(result.IsSuccess);
       Assert.Equal(500, result.StatusCode);
   }

   [Fact]
   public async Task ExistsAsync_WithValidPublicId_ShouldReturnTrue()
   {
       // Arrange
       var file = CreateTestFile();
       var uploadResult = await _service.UploadAsync(file);
       Assert.True(uploadResult.IsSuccess);
       _uploadedPublicIds.Add(uploadResult.Data);

       // Act
       var result = await _service.ExistsAsync(uploadResult.Data);

       // Assert
       Assert.True(result.IsSuccess);
       Assert.True(result.Data);
   }

   [Fact]
   public async Task ExistsAsync_WithInvalidPublicId_ShouldFail()
   {
       // Act
       var result = await _service.ExistsAsync("invalid_public_id");

       // Assert
       Assert.False(result.IsSuccess);
       Assert.Equal(500, result.StatusCode);
   }

   [Fact]
   public void GetFileUrl_ShouldReturnValidUrl()
   {
       // Arrange
       var publicId = "test_public_id";

       // Act
       var result = _service.GetFileUrl(publicId);

       // Assert
       Assert.NotNull(result);
       Assert.Contains(publicId, result);
   }
}